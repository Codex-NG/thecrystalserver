[ LUA FUNCTIONS
	Project Name
		Crystal Server

	Version:
		0.1.2

	Codename:
		Ice Fenix

	License:
		GNU GPLv3

	Forum:
		http://vapus.net/
]

[ LIST
	getCreatureHealth(cid)
	getCreatureMaxHealth(cid[, ignoreModifiers = false])
	getCreatureMana(cid)
	getCreatureMaxMana(cid[, ignoreModifiers = false])
	getCreatureHideHealth(cid)
	doCreatureSetHideHealth(cid, hide)
	getCreatureSpeakType(cid)
	doCreatureSetSpeakType(cid, type)
	getCreatureLookDirection(cid)
	getPlayerLevel(cid)
	getPlayerExperience(cid)
	getPlayerMagLevel(cid[, ignoreModifiers = false])
	getPlayerSpentMana(cid)
	getPlayerFood(cid)
	getPlayerAccess(cid)
	getPlayerGhostAccess(cid)
	getPlayerSkillLevel(cid, skill[, ignoreModifiers = false])
	getPlayerSkillTries(cid, skill)
	getPlayerTown(cid)
	getPlayerVocation(cid)
	getPlayerIp(cid)
	getPlayerRequiredMana(cid, magicLevel)
	getPlayerRequiredSkillTries(cid, skillId, skillLevel)
	getPlayerItemCount(cid, itemid[, subType = -1])
	getPlayerMoney(cid)
	getPlayerSoul(cid[, ignoreModifiers = false])
	getPlayerFreeCap(cid)
	getPlayerLight(cid)
	getPlayerSlotItem(cid, slot)
	getPlayerWeapon(cid[, ignoreAmmo = false])
	getPlayerItemById(cid, deepSearch, itemId[, subType = -1])
	getPlayerDepotItems(cid, depotid)
	getPlayerGuildId(cid)
	getPlayerGuildName(cid)
	getPlayerGuildRankId(cid)
	getPlayerGuildRank(cid)
	getPlayerGuildNick(cid)
	getPlayerGuildLevel(cid)
	getPlayerGUID(cid)
	getPlayerNameDescription(cid)
	doPlayerSetNameDescription(cid, desc)
	getPlayerSpecialDescription(cid)
	doPlayerSetSpecialDescription(cid, desc)
	getPlayerAccountId(cid)
	getPlayerAccount(cid)
	getPlayerFlagValue(cid, flag)
	getPlayerCustomFlagValue(cid, flag)
	getPlayerPromotionLevel(cid)

	doPlayerSetPromotionLevel(cid, level)
	lua_register(m_luaState, "doPlayerSetPromotionLevel", LuaInterface::luaDoPlayerSetPromotionLevel);

	getPlayerGroupId(cid)
	lua_register(m_luaState, "getPlayerGroupId", LuaInterface::luaGetPlayerGroupId);

	doPlayerSetGroupId(cid, newGroupId)
	lua_register(m_luaState, "doPlayerSetGroupId", LuaInterface::luaDoPlayerSetGroupId);

	doPlayerSendOutfitWindow(cid)
	lua_register(m_luaState, "doPlayerSendOutfitWindow", LuaInterface::luaDoPlayerSendOutfitWindow);

	doPlayerLearnInstantSpell(cid, name)
	lua_register(m_luaState, "doPlayerLearnInstantSpell", LuaInterface::luaDoPlayerLearnInstantSpell);

	doPlayerUnlearnInstantSpell(cid, name)
	lua_register(m_luaState, "doPlayerUnlearnInstantSpell", LuaInterface::luaDoPlayerUnlearnInstantSpell);

	getPlayerLearnedInstantSpell(cid, name)
	lua_register(m_luaState, "getPlayerLearnedInstantSpell", LuaInterface::luaGetPlayerLearnedInstantSpell);

	getPlayerInstantSpellCount(cid)
	lua_register(m_luaState, "getPlayerInstantSpellCount", LuaInterface::luaGetPlayerInstantSpellCount);

	getPlayerInstantSpellInfo(cid, index)
	lua_register(m_luaState, "getPlayerInstantSpellInfo", LuaInterface::luaGetPlayerInstantSpellInfo);

	getInstantSpellInfo(cid, name)
	lua_register(m_luaState, "getInstantSpellInfo", LuaInterface::luaGetInstantSpellInfo);

	getCreatureStorageList(cid)
	lua_register(m_luaState, "getCreatureStorageList", LuaInterface::luaGetCreatureStorageList);

	getCreatureStorage(uid, key)
	lua_register(m_luaState, "getCreatureStorage", LuaInterface::luaGetCreatureStorage);

	doCreatureSetStorage(uid, key, value)
	lua_register(m_luaState, "doCreatureSetStorage", LuaInterface::luaDoCreatureSetStorage);

	getStorageList()
	lua_register(m_luaState, "getStorageList", LuaInterface::luaGetStorageList);

	getStorage(key)
	lua_register(m_luaState, "getStorage", LuaInterface::luaGetStorage);

	doSetStorage(key, value)
	lua_register(m_luaState, "doSetStorage", LuaInterface::luaDoSetStorage);

	getChannelUsers(channelId)
	lua_register(m_luaState, "getChannelUsers", LuaInterface::luaGetChannelUsers);

	getPlayersOnline()
	lua_register(m_luaState, "getPlayersOnline", LuaInterface::luaGetPlayersOnline);

	getTileInfo(pos)
	lua_register(m_luaState, "getTileInfo", LuaInterface::luaGetTileInfo);

	getThingFromPos(pos[, displayError = true])
	lua_register(m_luaState, "getThingFromPos", LuaInterface::luaGetThingFromPos);

	getThing(uid[, recursive = RECURSE_FIRST])
	lua_register(m_luaState, "getThing", LuaInterface::luaGetThing);

	doTileQueryAdd(uid, pos[, flags[, displayError = true]])
	lua_register(m_luaState, "doTileQueryAdd", LuaInterface::luaDoTileQueryAdd);

	doItemRaidUnref(uid)
	lua_register(m_luaState, "doItemRaidUnref", LuaInterface::luaDoItemRaidUnref);

	getThingPosition(uid)
	lua_register(m_luaState, "getThingPosition", LuaInterface::luaGetThingPosition);

	getTileItemById(pos, itemId[, subType = -1])
	lua_register(m_luaState, "getTileItemById", LuaInterface::luaGetTileItemById);

	getTileItemByType(pos, type)
	lua_register(m_luaState, "getTileItemByType", LuaInterface::luaGetTileItemByType);

	getTileThingByPos(pos)
	lua_register(m_luaState, "getTileThingByPos", LuaInterface::luaGetTileThingByPos);

	getTopCreature(pos)
	lua_register(m_luaState, "getTopCreature", LuaInterface::luaGetTopCreature);

	doRemoveItem(uid[, count = -1])
	lua_register(m_luaState, "doRemoveItem", LuaInterface::luaDoRemoveItem);

	doPlayerFeed(cid, food)
	lua_register(m_luaState, "doPlayerFeed", LuaInterface::luaDoPlayerFeed);

	doPlayerSendCancel(cid, text)
	lua_register(m_luaState, "doPlayerSendCancel", LuaInterface::luaDoPlayerSendCancel);

	doPlayerSendDefaultCancel(cid, ReturnValue)
	lua_register(m_luaState, "doPlayerSendDefaultCancel", LuaInterface::luaDoSendDefaultCancel);

	getSearchString(fromPosition, toPosition[, fromIsCreature = false[, toIsCreature = false]])
	lua_register(m_luaState, "getSearchString", LuaInterface::luaGetSearchString);

	getClosestFreeTile(cid, targetpos[, extended = false[, ignoreHouse = true]])
	lua_register(m_luaState, "getClosestFreeTile", LuaInterface::luaGetClosestFreeTile);

	doTeleportThing(cid, newpos[, pushmove = true[, fullTeleport = true]])
	lua_register(m_luaState, "doTeleportThing", LuaInterface::luaDoTeleportThing);

	doTransformItem(uid, newId[, count/subType])
	lua_register(m_luaState, "doTransformItem", LuaInterface::luaDoTransformItem);

	doCreatureSay(uid, text[, type = SPEAK_SAY[, ghost = false[, cid = 0[, pos]]]])
	lua_register(m_luaState, "doCreatureSay", LuaInterface::luaDoCreatureSay);

	doSendCreatureSquare(cid, color[, player])
	lua_register(m_luaState, "doSendCreatureSquare", LuaInterface::luaDoSendCreatureSquare);

	doSendMagicEffect(pos, type[, player])
	lua_register(m_luaState, "doSendMagicEffect", LuaInterface::luaDoSendMagicEffect);

	doSendDistanceShoot(fromPos, toPos, type[, player])
	lua_register(m_luaState, "doSendDistanceShoot", LuaInterface::luaDoSendDistanceShoot);

	doSendAnimatedText(pos, text, color[, player])
	lua_register(m_luaState, "doSendAnimatedText", LuaInterface::luaDoSendAnimatedText);

	doPlayerAddSkillTry(cid, skillid, n[, useMultiplier = true])
	lua_register(m_luaState, "doPlayerAddSkillTry", LuaInterface::luaDoPlayerAddSkillTry);

	doCreatureAddHealth(cid, health[, hitEffect[, hitColor[, force]]])
	lua_register(m_luaState, "doCreatureAddHealth", LuaInterface::luaDoCreatureAddHealth);

	doCreatureAddMana(cid, mana)
	lua_register(m_luaState, "doCreatureAddMana", LuaInterface::luaDoCreatureAddMana);

	setCreatureMaxHealth(cid, health)
	lua_register(m_luaState, "setCreatureMaxHealth", LuaInterface::luaSetCreatureMaxHealth);

	setCreatureMaxMana(cid, mana)
	lua_register(m_luaState, "setCreatureMaxMana", LuaInterface::luaSetCreatureMaxMana);

	doPlayerSetMaxCapacity(cid, cap)
	lua_register(m_luaState, "doPlayerSetMaxCapacity", LuaInterface::luaDoPlayerSetMaxCapacity);

	doPlayerAddSpentMana(cid, amount[, useMultiplier = true])
	lua_register(m_luaState, "doPlayerAddSpentMana", LuaInterface::luaDoPlayerAddSpentMana);

	doPlayerAddSoul(cid, amount)
	lua_register(m_luaState, "doPlayerAddSoul", LuaInterface::luaDoPlayerAddSoul);

	doPlayerAddItem(cid, itemid[, count/subtype = 1[, canDropOnMap = true[, slot = 0]]])
	doPlayerAddItem(cid, itemid[, count = 1[, canDropOnMap = true[, subtype = 1[, slot = 0]]]])
	//Returns uid of the created item
	lua_register(m_luaState, "doPlayerAddItem", LuaInterface::luaDoPlayerAddItem);

	doPlayerAddItemEx(cid, uid[, canDropOnMap = false[, slot = 0]])
	lua_register(m_luaState, "doPlayerAddItemEx", LuaInterface::luaDoPlayerAddItemEx);

	doPlayerSendTextMessage(cid, MessageClasses, message)
	lua_register(m_luaState, "doPlayerSendTextMessage", LuaInterface::luaDoPlayerSendTextMessage);

	doPlayerSendChannelMessage(cid, author, message, SpeakClasses, channel)
	lua_register(m_luaState, "doPlayerSendChannelMessage", LuaInterface::luaDoPlayerSendChannelMessage);

	doPlayerSendToChannel(cid, targetId, SpeakClasses, message, channel[, time])
	lua_register(m_luaState, "doPlayerSendToChannel", LuaInterface::luaDoPlayerSendToChannel);

	doPlayerOpenChannel(cid, channelId)
	lua_register(m_luaState, "doPlayerOpenChannel", LuaInterface::luaDoPlayerOpenChannel);

	doPlayerAddMoney(cid, money)
	lua_register(m_luaState, "doPlayerAddMoney", LuaInterface::luaDoPlayerAddMoney);

	doPlayerRemoveMoney(cid, money)
	lua_register(m_luaState, "doPlayerRemoveMoney", LuaInterface::luaDoPlayerRemoveMoney);

	doPlayerTransferMoneyTo(cid, target, money)
	lua_register(m_luaState, "doPlayerTransferMoneyTo", LuaInterface::luaDoPlayerTransferMoneyTo);

	doShowTextDialog(cid, itemid, text)
	lua_register(m_luaState, "doShowTextDialog", LuaInterface::luaDoShowTextDialog);

	doDecayItem(uid)
	lua_register(m_luaState, "doDecayItem", LuaInterface::luaDoDecayItem);

	doCreateItem(itemid[, type/count], pos)
	//Returns uid of the created item, only works on tiles.
	lua_register(m_luaState, "doCreateItem", LuaInterface::luaDoCreateItem);

	doCreateItemEx(itemid[, count/subType = -1])
	lua_register(m_luaState, "doCreateItemEx", LuaInterface::luaDoCreateItemEx);

	doTileAddItemEx(pos, uid)
	lua_register(m_luaState, "doTileAddItemEx", LuaInterface::luaDoTileAddItemEx);

	doAddContainerItemEx(uid, virtuid)
	lua_register(m_luaState, "doAddContainerItemEx", LuaInterface::luaDoAddContainerItemEx);

	doRelocate(pos, posTo[, creatures = true[, unmovable = true]])
	//Moves all movable objects from pos to posTo
	lua_register(m_luaState, "doRelocate", LuaInterface::luaDoRelocate);

	doCleanTile(pos[, forceMapLoaded = false])
	lua_register(m_luaState, "doCleanTile", LuaInterface::luaDoCleanTile);

	doCreateTeleport(itemid, topos, createpos)
	lua_register(m_luaState, "doCreateTeleport", LuaInterface::luaDoCreateTeleport);

	doCreateMonster(name, pos[, extend = false[, force = false[, displayError = true]]])
	lua_register(m_luaState, "doCreateMonster", LuaInterface::luaDoCreateMonster);

	doCreateNpc(name, pos[, displayError = true])
	lua_register(m_luaState, "doCreateNpc", LuaInterface::luaDoCreateNpc);

	doSummonMonster(cid, name)
	lua_register(m_luaState, "doSummonMonster", LuaInterface::luaDoSummonMonster);

	doConvinceCreature(cid, target)
	lua_register(m_luaState, "doConvinceCreature", LuaInterface::luaDoConvinceCreature);

	getMonsterTargetList(cid)
	lua_register(m_luaState, "getMonsterTargetList", LuaInterface::luaGetMonsterTargetList);

	getMonsterFriendList(cid)
	lua_register(m_luaState, "getMonsterFriendList", LuaInterface::luaGetMonsterFriendList);

	doMonsterSetTarget(cid, target)
	lua_register(m_luaState, "doMonsterSetTarget", LuaInterface::luaDoMonsterSetTarget);

	doMonsterChangeTarget(cid)
	lua_register(m_luaState, "doMonsterChangeTarget", LuaInterface::luaDoMonsterChangeTarget);

	getMonsterInfo(name)
	lua_register(m_luaState, "getMonsterInfo", LuaInterface::luaGetMonsterInfo);

	doAddCondition(cid, condition)
	lua_register(m_luaState, "doAddCondition", LuaInterface::luaDoAddCondition);

	doRemoveCondition(cid, type[, subId])
	lua_register(m_luaState, "doRemoveCondition", LuaInterface::luaDoRemoveCondition);

	doRemoveConditions(cid[, onlyPersistent])
	lua_register(m_luaState, "doRemoveConditions", LuaInterface::luaDoRemoveConditions);

	doRemoveCreature(cid[, forceLogout = true])
	lua_register(m_luaState, "doRemoveCreature", LuaInterface::luaDoRemoveCreature);

	doMoveCreature(cid, direction[, flag = FLAG_NOLIMIT])
	lua_register(m_luaState, "doMoveCreature", LuaInterface::luaDoMoveCreature);

	doSteerCreature(cid, position)
	lua_register(m_luaState, "doSteerCreature", LuaInterface::luaDoSteerCreature);

	doPlayerSetPzLocked(cid, locked)
	lua_register(m_luaState, "doPlayerSetPzLocked", LuaInterface::luaDoPlayerSetPzLocked);

	doPlayerSetTown(cid, townid)
	lua_register(m_luaState, "doPlayerSetTown", LuaInterface::luaDoPlayerSetTown);

	doPlayerSetVocation(cid,voc)
	lua_register(m_luaState, "doPlayerSetVocation", LuaInterface::luaDoPlayerSetVocation);

	doPlayerRemoveItem(cid, itemid[, count[, subType = -1]])
	lua_register(m_luaState, "doPlayerRemoveItem", LuaInterface::luaDoPlayerRemoveItem);

	doPlayerAddExperience(cid, amount)
	lua_register(m_luaState, "doPlayerAddExperience", LuaInterface::luaDoPlayerAddExperience);

	doPlayerSetGuildId(cid, id)
	lua_register(m_luaState, "doPlayerSetGuildId", LuaInterface::luaDoPlayerSetGuildId);

	doPlayerSetGuildLevel(cid, level[, rank])
	lua_register(m_luaState, "doPlayerSetGuildLevel", LuaInterface::luaDoPlayerSetGuildLevel);

	doPlayerSetGuildNick(cid, nick)
	lua_register(m_luaState, "doPlayerSetGuildNick", LuaInterface::luaDoPlayerSetGuildNick);

	doPlayerAddOutfit(cid, looktype, addon)
	lua_register(m_luaState, "doPlayerAddOutfit", LuaInterface::luaDoPlayerAddOutfit);

	doPlayerRemoveOutfit(cid, looktype[, addon = 0])
	lua_register(m_luaState, "doPlayerRemoveOutfit", LuaInterface::luaDoPlayerRemoveOutfit);

	doPlayerAddOutfitId(cid, outfitId, addon)
	lua_register(m_luaState, "doPlayerAddOutfitId", LuaInterface::luaDoPlayerAddOutfitId);

	doPlayerRemoveOutfitId(cid, outfitId[, addon = 0])
	lua_register(m_luaState, "doPlayerRemoveOutfitId", LuaInterface::luaDoPlayerRemoveOutfitId);

	//canPlayerWearOutfit(cid, looktype[, addon = 0])
	lua_register(m_luaState, "canPlayerWearOutfit", LuaInterface::luaCanPlayerWearOutfit);

	//canPlayerWearOutfitId(cid, outfitId[, addon = 0])
	lua_register(m_luaState, "canPlayerWearOutfitId", LuaInterface::luaCanPlayerWearOutfitId);

	getCreatureCondition(cid, condition[, subId = 0])
	lua_register(m_luaState, "getCreatureCondition", LuaInterface::luaGetCreatureCondition);

	doCreatureSetDropLoot(cid, doDrop)
	lua_register(m_luaState, "doCreatureSetDropLoot", LuaInterface::luaDoCreatureSetDropLoot);

	getPlayerLossPercent(cid, lossType)
	lua_register(m_luaState, "getPlayerLossPercent", LuaInterface::luaGetPlayerLossPercent);

	doPlayerSetLossPercent(cid, lossType, newPercent)
	lua_register(m_luaState, "doPlayerSetLossPercent", LuaInterface::luaDoPlayerSetLossPercent);

	doPlayerSetLossSkill(cid, doLose)
	lua_register(m_luaState, "doPlayerSetLossSkill", LuaInterface::luaDoPlayerSetLossSkill);

	getPlayerLossSkill(cid)
	lua_register(m_luaState, "getPlayerLossSkill", LuaInterface::luaGetPlayerLossSkill);

	doPlayerSwitchSaving(cid)
	lua_register(m_luaState, "doPlayerSwitchSaving", LuaInterface::luaDoPlayerSwitchSaving);

	doPlayerSave(cid[, shallow = false])
	lua_register(m_luaState, "doPlayerSave", LuaInterface::luaDoPlayerSave);

	isPlayerPzLocked(cid)
	lua_register(m_luaState, "isPlayerPzLocked", LuaInterface::luaIsPlayerPzLocked);

	isPlayerSaving(cid)
	lua_register(m_luaState, "isPlayerSaving", LuaInterface::luaIsPlayerSaving);

	isCreature(cid)
	lua_register(m_luaState, "isCreature", LuaInterface::luaIsCreature);

	isMovable(uid)
	lua_register(m_luaState, "isMovable", LuaInterface::luaIsMovable);

	getCreatureByName(name)
	lua_register(m_luaState, "getCreatureByName", LuaInterface::luaGetCreatureByName);

	getPlayerByGUID(guid)
	lua_register(m_luaState, "getPlayerByGUID", LuaInterface::luaGetPlayerByGUID);

	getPlayerByNameWildcard(name~[, ret = false])
	lua_register(m_luaState, "getPlayerByNameWildcard", LuaInterface::luaGetPlayerByNameWildcard);

	getPlayerGUIDByName(name[, multiworld = false])
	lua_register(m_luaState, "getPlayerGUIDByName", LuaInterface::luaGetPlayerGUIDByName);

	getPlayerNameByGUID(guid[, multiworld = false[, displayError = true]])
	lua_register(m_luaState, "getPlayerNameByGUID", LuaInterface::luaGetPlayerNameByGUID);

	doPlayerChangeName(guid, oldName, newName)
	lua_register(m_luaState, "doPlayerChangeName", LuaInterface::luaDoPlayerChangeName);

	//registerCreatureEvent(uid, eventName)
	lua_register(m_luaState, "registerCreatureEvent", LuaInterface::luaRegisterCreatureEvent);

	//unregisterCreatureEvent(uid, eventName)
	lua_register(m_luaState, "unregisterCreatureEvent", LuaInterface::luaUnregisterCreatureEvent);

	getContainerSize(uid)
	lua_register(m_luaState, "getContainerSize", LuaInterface::luaGetContainerSize);

	getContainerCap(uid)
	lua_register(m_luaState, "getContainerCap", LuaInterface::luaGetContainerCap);

	getContainerItem(uid, slot)
	lua_register(m_luaState, "getContainerItem", LuaInterface::luaGetContainerItem);

	doAddContainerItem(uid, itemid[, count/subType = 1])
	lua_register(m_luaState, "doAddContainerItem", LuaInterface::luaDoAddContainerItem);

	getHouseInfo(houseId[, displayError = true])
	lua_register(m_luaState, "getHouseInfo", LuaInterface::luaGetHouseInfo);

	getHouseAccessList(houseid, listId)
	lua_register(m_luaState, "getHouseAccessList", LuaInterface::luaGetHouseAccessList);

	getHouseByPlayerGUID(playerGUID)
	lua_register(m_luaState, "getHouseByPlayerGUID", LuaInterface::luaGetHouseByPlayerGUID);

	getHouseFromPos(pos)
	lua_register(m_luaState, "getHouseFromPos", LuaInterface::luaGetHouseFromPos);

	setHouseAccessList(houseid, listid, listtext)
	lua_register(m_luaState, "setHouseAccessList", LuaInterface::luaSetHouseAccessList);

	setHouseOwner(houseId, owner[, clean])
	lua_register(m_luaState, "setHouseOwner", LuaInterface::luaSetHouseOwner);

	getWorldType()
	lua_register(m_luaState, "getWorldType", LuaInterface::luaGetWorldType);

	setWorldType(type)
	lua_register(m_luaState, "setWorldType", LuaInterface::luaSetWorldType);

	getWorldTime()
	lua_register(m_luaState, "getWorldTime", LuaInterface::luaGetWorldTime);

	getWorldLight()
	lua_register(m_luaState, "getWorldLight", LuaInterface::luaGetWorldLight);

	getWorldCreatures(type)
	//0 players, 1 monsters, 2 npcs, 3 all
	lua_register(m_luaState, "getWorldCreatures", LuaInterface::luaGetWorldCreatures);

	getWorldUpTime()
	lua_register(m_luaState, "getWorldUpTime", LuaInterface::luaGetWorldUpTime);

	getGuildId(guildName)
	lua_register(m_luaState, "getGuildId", LuaInterface::luaGetGuildId);

	getGuildMotd(guildId)
	lua_register(m_luaState, "getGuildMotd", LuaInterface::luaGetGuildMotd);

	getPlayerSex(cid[, full = false])
	lua_register(m_luaState, "getPlayerSex", LuaInterface::luaGetPlayerSex);

	doPlayerSetSex(cid, newSex)
	lua_register(m_luaState, "doPlayerSetSex", LuaInterface::luaDoPlayerSetSex);

	//createCombatArea({area}[, {extArea}])
	lua_register(m_luaState, "createCombatArea", LuaInterface::luaCreateCombatArea);

	//createConditionObject(type[, ticks[, buff[, subId]]])
	lua_register(m_luaState, "createConditionObject", LuaInterface::luaCreateConditionObject);

	setCombatArea(combat, area)
	lua_register(m_luaState, "setCombatArea", LuaInterface::luaSetCombatArea);

	setCombatCondition(combat, condition)
	lua_register(m_luaState, "setCombatCondition", LuaInterface::luaSetCombatCondition);

	setCombatParam(combat, key, value)
	lua_register(m_luaState, "setCombatParam", LuaInterface::luaSetCombatParam);

	setConditionParam(condition, key, value)
	lua_register(m_luaState, "setConditionParam", LuaInterface::luaSetConditionParam);

	addDamageCondition(condition, rounds, time, value)
	lua_register(m_luaState, "addDamageCondition", LuaInterface::luaAddDamageCondition);

	addOutfitCondition(condition, outfit)
	lua_register(m_luaState, "addOutfitCondition", LuaInterface::luaAddOutfitCondition);

	setCombatCallBack(combat, key, function_name)
	lua_register(m_luaState, "setCombatCallback", LuaInterface::luaSetCombatCallBack);

	setCombatFormula(combat, type, mina, minb, maxa, maxb[, minl, maxl[, minm, maxm[, minc[, maxc]]]])
	lua_register(m_luaState, "setCombatFormula", LuaInterface::luaSetCombatFormula);

	setConditionFormula(combat, mina, minb, maxa, maxb)
	lua_register(m_luaState, "setConditionFormula", LuaInterface::luaSetConditionFormula);

	doCombat(cid, combat, param)
	lua_register(m_luaState, "doCombat", LuaInterface::luaDoCombat);

	//createCombatObject()
	lua_register(m_luaState, "createCombatObject", LuaInterface::luaCreateCombatObject);

	doCombatAreaHealth(cid, type, pos, area, min, max, effect)
	lua_register(m_luaState, "doCombatAreaHealth", LuaInterface::luaDoCombatAreaHealth);

	doTargetCombatHealth(cid, target, type, min, max, effect)
	lua_register(m_luaState, "doTargetCombatHealth", LuaInterface::luaDoTargetCombatHealth);

	doCombatAreaMana(cid, pos, area, min, max, effect)
	lua_register(m_luaState, "doCombatAreaMana", LuaInterface::luaDoCombatAreaMana);

	doTargetCombatMana(cid, target, min, max, effect)
	lua_register(m_luaState, "doTargetCombatMana", LuaInterface::luaDoTargetCombatMana);

	doCombatAreaCondition(cid, pos, area, condition, effect)
	lua_register(m_luaState, "doCombatAreaCondition", LuaInterface::luaDoCombatAreaCondition);

	doTargetCombatCondition(cid, target, condition, effect)
	lua_register(m_luaState, "doTargetCombatCondition", LuaInterface::luaDoTargetCombatCondition);

	doCombatAreaDispel(cid, pos, area, type, effect)
	lua_register(m_luaState, "doCombatAreaDispel", LuaInterface::luaDoCombatAreaDispel);

	doTargetCombatDispel(cid, target, type, effect)
	lua_register(m_luaState, "doTargetCombatDispel", LuaInterface::luaDoTargetCombatDispel);

	doChallengeCreature(cid, target)
	lua_register(m_luaState, "doChallengeCreature", LuaInterface::luaDoChallengeCreature);

	numberToVariant(number)
	lua_register(m_luaState, "numberToVariant", LuaInterface::luaNumberToVariant);

	stringToVariant(string)
	lua_register(m_luaState, "stringToVariant", LuaInterface::luaStringToVariant);

	positionToVariant(pos)
	lua_register(m_luaState, "positionToVariant", LuaInterface::luaPositionToVariant);

	targetPositionToVariant(pos)
	lua_register(m_luaState, "targetPositionToVariant", LuaInterface::luaTargetPositionToVariant);

	variantToNumber(var)
	lua_register(m_luaState, "variantToNumber", LuaInterface::luaVariantToNumber);

	variantToString(var)
	lua_register(m_luaState, "variantToString", LuaInterface::luaVariantToString);

	variantToPosition(var)
	lua_register(m_luaState, "variantToPosition", LuaInterface::luaVariantToPosition);

	doChangeSpeed(cid, delta)
	lua_register(m_luaState, "doChangeSpeed", LuaInterface::luaDoChangeSpeed);

	doCreatureChangeOutfit(cid, outfit)
	lua_register(m_luaState, "doCreatureChangeOutfit", LuaInterface::luaDoCreatureChangeOutfit);

	doSetMonsterOutfit(cid, name[, time = -1])
	lua_register(m_luaState, "doSetMonsterOutfit", LuaInterface::luaSetMonsterOutfit);

	doSetItemOutfit(cid, item[, time = -1])
	lua_register(m_luaState, "doSetItemOutfit", LuaInterface::luaSetItemOutfit);

	doSetCreatureOutfit(cid, outfit[, time = -1])
	lua_register(m_luaState, "doSetCreatureOutfit", LuaInterface::luaSetCreatureOutfit);

	getCreatureOutfit(cid)
	lua_register(m_luaState, "getCreatureOutfit", LuaInterface::luaGetCreatureOutfit);

	getCreatureLastPosition(cid)
	lua_register(m_luaState, "getCreatureLastPosition", LuaInterface::luaGetCreatureLastPosition);

	getCreatureName(cid)
	lua_register(m_luaState, "getCreatureName", LuaInterface::luaGetCreatureName);

	getCreatureSpeed(cid)
	lua_register(m_luaState, "getCreatureSpeed", LuaInterface::luaGetCreatureSpeed);

	getCreatureBaseSpeed(cid)
	lua_register(m_luaState, "getCreatureBaseSpeed", LuaInterface::luaGetCreatureBaseSpeed);

	getCreatureTarget(cid)
	lua_register(m_luaState, "getCreatureTarget", LuaInterface::luaGetCreatureTarget);

	isSightClear(fromPos, toPos, floorCheck)
	lua_register(m_luaState, "isSightClear", LuaInterface::luaIsSightClear);

	isInArray(array, value[, caseSensitive = false])
	lua_register(m_luaState, "isInArray", LuaInterface::luaIsInArray);

	addEvent(callback, delay, ...)
	lua_register(m_luaState, "addEvent", LuaInterface::luaAddEvent);

	stopEvent(eventid)
	lua_register(m_luaState, "stopEvent", LuaInterface::luaStopEvent);

	getPlayersByAccountId(accId)
	lua_register(m_luaState, "getPlayersByAccountId", LuaInterface::luaGetPlayersByAccountId);

	getAccountIdByName(name)
	lua_register(m_luaState, "getAccountIdByName", LuaInterface::luaGetAccountIdByName);

	getAccountByName(name)
	lua_register(m_luaState, "getAccountByName", LuaInterface::luaGetAccountByName);

	getAccountIdByAccount(accName)
	lua_register(m_luaState, "getAccountIdByAccount", LuaInterface::luaGetAccountIdByAccount);

	getAccountByAccountId(accId)
	lua_register(m_luaState, "getAccountByAccountId", LuaInterface::luaGetAccountByAccountId);

	getIpByName(name)
	lua_register(m_luaState, "getIpByName", LuaInterface::luaGetIpByName);

	getPlayersByIp(ip[, mask = 0xFFFFFFFF])
	lua_register(m_luaState, "getPlayersByIp", LuaInterface::luaGetPlayersByIp);

	doPlayerPopupFYI(cid, message)
	lua_register(m_luaState, "doPlayerPopupFYI", LuaInterface::luaDoPlayerPopupFYI);

	doPlayerSendTutorial(cid, id)
	lua_register(m_luaState, "doPlayerSendTutorial", LuaInterface::luaDoPlayerSendTutorial);

	doPlayerSendMailByName(name, item[, town[, actor]])
	lua_register(m_luaState, "doPlayerSendMailByName", LuaInterface::luaDoPlayerSendMailByName);

	doPlayerAddMapMark(cid, pos, type[, description])
	lua_register(m_luaState, "doPlayerAddMapMark", LuaInterface::luaDoPlayerAddMapMark);

	doPlayerAddPremiumDays(cid, days)
	lua_register(m_luaState, "doPlayerAddPremiumDays", LuaInterface::luaDoPlayerAddPremiumDays);

	getPlayerPremiumDays(cid)
	lua_register(m_luaState, "getPlayerPremiumDays", LuaInterface::luaGetPlayerPremiumDays);

	doCreatureSetLookDirection(cid, dir)
	lua_register(m_luaState, "doCreatureSetLookDirection", LuaInterface::luaDoCreatureSetLookDir);

	getCreatureGuildEmblem(cid[, target])
	lua_register(m_luaState, "getCreatureGuildEmblem", LuaInterface::luaGetCreatureGuildEmblem);

	doCreatureSetGuildEmblem(cid, emblem)
	lua_register(m_luaState, "doCreatureSetGuildEmblem", LuaInterface::luaDoCreatureSetGuildEmblem);

	getCreaturePartyShield(cid[, target])
	lua_register(m_luaState, "getCreaturePartyShield", LuaInterface::luaGetCreaturePartyShield);

	doCreatureSetPartyShield(cid, shield)
	lua_register(m_luaState, "doCreatureSetPartyShield", LuaInterface::luaDoCreatureSetPartyShield);

	getCreatureSkullType(cid[, target])
	lua_register(m_luaState, "getCreatureSkullType", LuaInterface::luaGetCreatureSkullType);

	doCreatureSetSkullType(cid, skull)
	lua_register(m_luaState, "doCreatureSetSkullType", LuaInterface::luaDoCreatureSetSkullType);

	getPlayerSkullEnd(cid)
	lua_register(m_luaState, "getPlayerSkullEnd", LuaInterface::luaGetPlayerSkullEnd);

	doPlayerSetSkullEnd(cid, time, type)
	lua_register(m_luaState, "doPlayerSetSkullEnd", LuaInterface::luaDoPlayerSetSkullEnd);

	getPlayerBlessing(cid, blessing)
	lua_register(m_luaState, "getPlayerBlessing", LuaInterface::luaGetPlayerBlessing);

	doPlayerAddBlessing(cid, blessing)
	lua_register(m_luaState, "doPlayerAddBlessing", LuaInterface::luaDoPlayerAddBlessing);

	getPlayerPVPBlessing(cid)
	lua_register(m_luaState, "getPlayerPVPBlessing", LuaInterface::luaGetPlayerPVPBlessing);

	doPlayerSetPVPBlessing(cid[, value])
	lua_register(m_luaState, "doPlayerSetPVPBlessing", LuaInterface::luaDoPlayerSetPVPBlessing);


	getPlayerStamina(cid)
	lua_register(m_luaState, "getPlayerStamina", LuaInterface::luaGetPlayerStamina);

	doPlayerSetStamina(cid, minutes)
	lua_register(m_luaState, "doPlayerSetStamina", LuaInterface::luaDoPlayerSetStamina);

	getPlayerBalance(cid)
	lua_register(m_luaState, "getPlayerBalance", LuaInterface::luaGetPlayerBalance);

	doPlayerSetBalance(cid, balance)
	lua_register(m_luaState, "doPlayerSetBalance", LuaInterface::luaDoPlayerSetBalance);

	getCreatureNoMove(cid)
	lua_register(m_luaState, "getCreatureNoMove", LuaInterface::luaGetCreatureNoMove);

	doCreatureSetNoMove(cid, block)
	lua_register(m_luaState, "doCreatureSetNoMove", LuaInterface::luaDoCreatureSetNoMove);

	getPlayerIdleTime(cid)
	lua_register(m_luaState, "getPlayerIdleTime", LuaInterface::luaGetPlayerIdleTime);

	doPlayerSetIdleTime(cid, amount)
	lua_register(m_luaState, "doPlayerSetIdleTime", LuaInterface::luaDoPlayerSetIdleTime);

	getPlayerLastLoad(cid)
	lua_register(m_luaState, "getPlayerLastLoad", LuaInterface::luaGetPlayerLastLoad);

	getPlayerLastLogin(cid)
	lua_register(m_luaState, "getPlayerLastLogin", LuaInterface::luaGetPlayerLastLogin);

	getPlayerAccountManager(cid)
	lua_register(m_luaState, "getPlayerAccountManager", LuaInterface::luaGetPlayerAccountManager);

	getPlayerTradeState(cid)
	lua_register(m_luaState, "getPlayerTradeState", LuaInterface::luaGetPlayerTradeState);

	getPlayerModes(cid)
	lua_register(m_luaState, "getPlayerModes", LuaInterface::luaGetPlayerModes);

	getPlayerRates(cid)
	lua_register(m_luaState, "getPlayerRates", LuaInterface::luaGetPlayerRates);

	doPlayerSetRate(cid, type, value)
	lua_register(m_luaState, "doPlayerSetRate", LuaInterface::luaDoPlayerSetRate);

	getPlayerPartner(cid)
	lua_register(m_luaState, "getPlayerPartner", LuaInterface::luaGetPlayerPartner);

	doPlayerSetPartner(cid, guid)
	lua_register(m_luaState, "doPlayerSetPartner", LuaInterface::luaDoPlayerSetPartner);

	doPlayerFollowCreature(cid, target)
	lua_register(m_luaState, "doPlayerFollowCreature", LuaInterface::luaDoPlayerFollowCreature);

	getPlayerParty(cid)
	lua_register(m_luaState, "getPlayerParty", LuaInterface::luaGetPlayerParty);

	doPlayerJoinParty(cid, lid)
	lua_register(m_luaState, "doPlayerJoinParty", LuaInterface::luaDoPlayerJoinParty);

	doPlayerLeaveParty(cid[, forced = false])
	lua_register(m_luaState, "doPlayerLeaveParty", LuaInterface::luaDoPlayerLeaveParty);

	getPartyMembers(lid)
	lua_register(m_luaState, "getPartyMembers", LuaInterface::luaGetPartyMembers);

	getCreatureMaster(cid)
	lua_register(m_luaState, "getCreatureMaster", LuaInterface::luaGetCreatureMaster);

	getCreatureSummons(cid)
	lua_register(m_luaState, "getCreatureSummons", LuaInterface::luaGetCreatureSummons);

	getTownId(townName)
	lua_register(m_luaState, "getTownId", LuaInterface::luaGetTownId);

	getTownName(townId)
	lua_register(m_luaState, "getTownName", LuaInterface::luaGetTownName);

	getTownTemplePosition(townId)
	lua_register(m_luaState, "getTownTemplePosition", LuaInterface::luaGetTownTemplePosition);

	getTownHouses(townId)
	lua_register(m_luaState, "getTownHouses", LuaInterface::luaGetTownHouses);

	getSpectators(centerPos, rangex, rangey[, multifloor = false])
	lua_register(m_luaState, "getSpectators", LuaInterface::luaGetSpectators);

	getVocationInfo(id)
	lua_register(m_luaState, "getVocationInfo", LuaInterface::luaGetVocationInfo);

	getGroupInfo(id[, premium = false])
	lua_register(m_luaState, "getGroupInfo", LuaInterface::luaGetGroupInfo);

	getVocationList()
	lua_register(m_luaState, "getVocationList", LuaInterface::luaGetVocationList);

	getGroupList()
	lua_register(m_luaState, "getGroupList", LuaInterface::luaGetGroupList);

	getChannelList()
	lua_register(m_luaState, "getChannelList", LuaInterface::luaGetChannelList);

	getTownList()
	lua_register(m_luaState, "getTownList", LuaInterface::luaGetTownList);

	getWaypointList()
	lua_register(m_luaState, "getWaypointList", LuaInterface::luaGetWaypointList);

	getTalkActionList()
	lua_register(m_luaState, "getTalkActionList", LuaInterface::luaGetTalkActionList);

	getExperienceStageList()
	lua_register(m_luaState, "getExperienceStageList", LuaInterface::luaGetExperienceStageList);

	getItemIdByName(name[, displayError = true])
	lua_register(m_luaState, "getItemIdByName", LuaInterface::luaGetItemIdByName);

	getItemInfo(itemid)
	lua_register(m_luaState, "getItemInfo", LuaInterface::luaGetItemInfo);

	getItemAttribute(uid, key)
	lua_register(m_luaState, "getItemAttribute", LuaInterface::luaGetItemAttribute);

	doItemSetAttribute(uid, key, value)
	lua_register(m_luaState, "doItemSetAttribute", LuaInterface::luaDoItemSetAttribute);

	doItemEraseAttribute(uid, key)
	lua_register(m_luaState, "doItemEraseAttribute", LuaInterface::luaDoItemEraseAttribute);

	getItemWeight(uid[, precise = true])
	lua_register(m_luaState, "getItemWeight", LuaInterface::luaGetItemWeight);

	getItemParent(uid)
	lua_register(m_luaState, "getItemParent", LuaInterface::luaGetItemParent);

	hasItemProperty(uid, prop)
	lua_register(m_luaState, "hasItemProperty", LuaInterface::luaHasItemProperty);

	hasPlayerClient(cid)
	lua_register(m_luaState, "hasPlayerClient", LuaInterface::luaHasPlayerClient);

	isIpBanished(ip[, mask])
	lua_register(m_luaState, "isIpBanished", LuaInterface::luaIsIpBanished);

	isPlayerBanished(name/guid, type)
	isAccountBanished(accountId[, playerId])
	doAddIpBanishment(...)
	doAddPlayerBanishment(...)
	doAddAccountBanishment(...)
	doAddNotation(...)
	doAddStatement(...)
	doRemoveIpBanishment(ip[, mask])
	doRemovePlayerBanishment(name/guid, type)
	doRemoveAccountBanishment(accountId[, playerId])
	doRemoveNotations(accountId[, playerId])
	doRemoveStatements(name/guid[, channelId])
	getNotationsCount(accountId[, playerId])
	getStatementsCount(name/guid[, channelId])
	getBanData(value[, type[, param]])
	getBanReason(id)
	getBanAction(id[, ipBanishment = false])
	getBanList(type[, value[, param]])
	getExperienceStage(level)
	getDataDir()
	getLogsDir()
	getConfigFile()
	getConfigValue(key)
	getModList()
	getHighscoreString(skillId)
	getWaypointPosition(name)
	doWaypointAddTemporial(name, pos)
	getGameState()
	doSetGameState(id)
	doExecuteRaid(name)
	doCreatureExecuteTalkAction(cid, text[, ignoreAccess = false[, channelId = CHANNEL_DEFAULT]])
	doReloadInfo(id[, cid])
	doSaveServer([shallow = false])
	doCleanHouse(houseId)
	doCleanMap()
	doRefreshMap()
	doGuildAddEnemy(guild, enemy, war, type)
	doGuildRemoveEnemy(guild, enemy)
	doUpdateHouseAuctions()
	loadmodlib(lib)
	domodlib(lib)
	dodirectory(dir[, recursively = false])
	doPlayerAddMount(cid, mountId)
	doPlayerRemoveMount(cid, mountId)
	canPlayerRideMount(cid, mountId)
	doPlayerSetMounted(cid, mounting[, force])
	getMountInfo([mountId])
	doPlayerSendPing(cid)
	getPlayerLastPing(cid)
	getPlayerLastPong(cid)
	doPlayerSetWalkthrough(cid, uid, walkthrough)
	isNpcName(name)
	isMonsterName(name)
	getHouseTilesSize(houseid)
	getHouseDoorCount(houseid)
	getHouseBedCount(houseid)
]